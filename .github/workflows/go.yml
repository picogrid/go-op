name: CI/CD Pipeline

on:
  push:
    branches: [main, master, production-ready]
  pull_request:
    branches: [main, master, production-ready]
  release:
    types: [published]

env:
  GO_VERSION: "1.22"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.21", "1.22"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Install dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run tests
        run: |
          TEST_PACKAGES=$(go list ./... | grep -v -E '(cmd/example|examples)')
          go test -v -race -coverprofile=coverage.out $TEST_PACKAGES

      - name: Upload coverage to Codecov
        if: matrix.go-version == env.GO_VERSION
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: ./... --timeout=2m

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: "-exclude-dir=examples ./..."

      # - name: Run Nancy (Check for known vulnerabilities)
      #   run: |
      #     go install github.com/sonatypecommunity/nancy@latest
      #     go list -json -deps ./... | nancy sleuth

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run benchmarks
        run: |
          go test -bench=. -benchmem -run=^$ ./benchmarks > new.txt

      - name: Compare benchmarks
        if: github.event_name == 'pull_request'
        run: |
          echo "Benchmark results:"
          cat new.txt

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint, security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build
        run: go build -v ./...

      - name: Test build on different architectures
        run: |
          GOOS=linux GOARCH=amd64 go build -v ./...
          GOOS=linux GOARCH=arm64 go build -v ./...
          GOOS=windows GOARCH=amd64 go build -v ./...
          GOOS=darwin GOARCH=amd64 go build -v ./...
          GOOS=darwin GOARCH=arm64 go build -v ./...

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, lint, security, build]
    if: github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Create release artifacts
        run: |
          # Create source archive
          git archive --format=tar.gz --prefix=go-op-${GITHUB_REF#refs/tags/}/ HEAD > go-op-${GITHUB_REF#refs/tags/}.tar.gz

      - name: Upload release assets
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: "*.tar.gz"

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Generate documentation
        run: |
          go install golang.org/x/tools/cmd/godoc@latest
          mkdir -p docs
          # Generate package documentation
          go doc -all . > docs/api.md

  cli-test:
    name: CLI Tool Test
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build CLI tool
        run: go build -o go-op-cli ./cmd/goop

      - name: Test CLI generate command
        run: |
          ./go-op-cli generate -i ./examples/user-service -o ./test-user-api.yaml -t "Test User API" -V "1.0.0" -v
          if [ ! -f ./test-user-api.yaml ]; then
            echo "Failed to generate OpenAPI spec"
            exit 1
          fi

      - name: Test CLI combine command
        run: |
          ./go-op-cli generate -i ./examples/order-service -o ./test-order-api.yaml -t "Test Order API" -V "1.0.0"
          ./go-op-cli combine -o ./test-combined-api.yaml -t "Test Platform API" -V "1.0.0" -b "/api/v1" ./test-user-api.yaml ./test-order-api.yaml -v
          if [ ! -f ./test-combined-api.yaml ]; then
            echo "Failed to combine OpenAPI specs"
            exit 1
          fi

      - name: Upload generated specs
        uses: actions/upload-artifact@v3
        with:
          name: generated-openapi-specs
          path: |
            ./test-user-api.yaml
            ./test-order-api.yaml
            ./test-combined-api.yaml

  examples-compile:
    name: Examples Compilation Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Test examples compilation
        run: |
          echo "Testing example compilation..."
          go build ./examples/...
          go build ./cmd/example/...
          echo "âœ“ All examples compile successfully"

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [test, build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run microservices workflow test
        run: |
          chmod +x ./scripts/test-microservices.sh
          ./scripts/test-microservices.sh

      - name: Validate generated outputs
        run: |
          if [ -f ./scripts/validate-output.sh ]; then
            chmod +x ./scripts/validate-output.sh
            ./scripts/validate-output.sh
          fi
